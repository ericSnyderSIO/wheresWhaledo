function whaleOut = brushTDOA(whaleIn, H, varargin)
% whaleOut = brushTDOA(whaleIn, H)
% whaleOut = brushTDOA(whaleIn, H, 'brushing.params')
% takes a whale struct from localize.m and runs a GUI for making final
% edits to the TDOAs and tracks.
% inputs:
% whaleIn: whale struct to be edited
% H: a struct containing the H matrices for the four channels (H{1} and
% H{2})
% optional: brushing.params file location. If none specified, the default
% brusing.params file from the wheresWhaledo directory will be used.
% output:
% whaleOut: edited whale struct

global brushing 
warning off

if nargin == 2 % no parameter file specified
    if isfile('brushing.params') % see if default parameter file exists
        loadParams('brushing.params')
    else % if no default param file exists, generate one
        makeParamFile
    end
elseif nargin == 3 % parameter file specified
    loadParams(varargin{1})
end

% test whether label color legend exists
figCol = findall(0, 'Type', 'figure', 'name', 'Legend of Label Colors');
if isempty(figCol)
    generateColorSchemeLegend(brushing) % if legend doesn't exist, generate it
end

% test whether Keystroke Command Legend exists
figKey = findall(0, 'Type', 'figure', 'name', 'Keystroke Command Legend');
if isempty(figKey)
    generateKeystrokeLegend(brushing) % if legend doesn't exist, generate it
end

% restructure data for easier plot interactions:
global DET
DET = table;
ind = 1;
whaleNumber = []; 
for wn = 1:numel(whaleIn)
    if isempty(whaleIn{wn})
        continue % skip to next it
    else
        if isempty(whaleIn{wn}.TDet)
            continue
        end
    end
    NDet = length(whaleIn{wn}.TDet);
    DET(ind:ind+NDet-1, :) = whaleIn{wn};
    whaleNumber = [whaleNumber; wn.*ones(size(whaleIn{wn}.TDet))];
    ind = ind+NDet;
end

DET.whaleNumber = whaleNumber;
DET.Ang1 = nan(length(DET.TDet), 2);
DET.Ang2 = nan(length(DET.TDet), 2);

% calculate angles of arrival to small aperture arrays:
for i = 1:length(DET.TDet)

    if ~isnan(DET.TDOA(i, 1)) % Array 1 received detection
        doa = DET.TDOA(i, 1:6).'\H{1};
        doa = doa./sqrt(sum(doa.^2));
        el = 180 - acosd(doa(3));
        az = atan2d(doa(2), doa(1));
        DET.Ang1(i, :) = [az, el];
    end

    if ~isnan(DET.TDOA(i, 7)) % Array 2 received detection
        doa = DET.TDOA(i, 7:12).'\H{2};
        doa = doa./sqrt(sum(doa.^2));
        el = 180 - acosd(doa(3));
        az = atan2d(doa(2), doa(1));
        DET.Ang2(i, :) = [az, el];
    end

end

% TO DO***********************************************************8
% Get the plots adjusted for TDOAs and whale positions. Make sure all
% editing still functions and correct datapoints are being manipulated.
% Place DET back into whale format.

DET = run_brushTDOA(DET, brushing);

qselect = input('\nEnter ''q'' to quit: ', 's');

% place DET back into whale structs, but with new edits.
for wn = 1:numel(whaleIn)
    Iwn = find(DET.whaleNumber==wn)
    whaleOut{wn} = DET(Iwn, :);
end

ok = 1;

end
%%
function DET = run_brushTDOA(DETin, brushing)
global DET DETprev brushing

DET = DETin;
DETprev = DET; % previous detection values (for undo function)

isfig = findall(0, 'Type', 'figure', 'name', 'Brush TDOA');    % see if Brush DOA figure already generated
if isempty(isfig)
    fig = figure('Name', 'Brush TDOA'); % generate figure
else
    close(isfig)
    fig = figure('Name', 'Brush TDOA'); % generate figure
end

fig.Position = brushing.params.figPosition;

plotDet(fig)

end

%%
function plotDet(fig)
% generate plots

global DET brushing

% set up plot parameters
markerSize = 6; % marker size in plots

mmtime(1) = min(DET.TDet); % minimum time axis value
mmtime(2) = max(DET.TDet); % maximum time axis value

% *** plot left column: whale positions vs time ***
ylab{1} = 'x (m)';
ylab{2} = 'y (m)';
ylab{3} = 'z (m)';

for spn = 1:3
    sp(spn) = subplot(3, 3, spn*3-2); % subplots 1, 4, and 7
    scatter(DET.TDet, DET.wloc(:,spn), markerSize, brushing.params.colorMat(DET.whaleNumber + 2, :), 'filled')
    set(gca, 'Xticklabel', [])
    xlim(mmtime)
    datetick('x', 'keepLimits')
    ylabel(ylab{spn})
    grid on
    subpos = get(sp(spn), 'Position');
    set(sp(spn), 'Position', subpos + [-.005, .005, .005, .005])
    tb = axtoolbar('default');
    tb.Visible = 'off';
end

% ***plot middle column: azimuth and elevations to 4ch arrays***
% azimuth, array 1:
sp(4) = subplot(4, 3, 2);
scatter(DET.TDet, DET.Ang1(:,1), markerSize, brushing.params.colorMat(DET.whaleNumber + 2, :), 'filled')
xlim(mmtime)
datetick('x', 'keepLimits')
ylabel('AZ1')
grid on
subpos = get(sp(4), 'Position');
set(sp(4), 'Position', subpos + [-.005, .005, .005, .005])
tb = axtoolbar('default');
tb.Visible = 'off';

% elevation, array 1:
sp(5) = subplot(4, 3, 5);
scatter(DET.TDet, DET.Ang1(:,2), markerSize, brushing.params.colorMat(DET.whaleNumber + 2, :), 'filled')
xlim(mmtime)
datetick('x', 'keepLimits')
ylabel('EL1')
grid on
subpos = get(sp(5), 'Position');
set(sp(5), 'Position', subpos + [-.005, .005, .005, .005])
tb = axtoolbar('default');
tb.Visible = 'off';

% azimuth, array 2:
sp(6) = subplot(4, 3, 8);
scatter(DET.TDet, DET.Ang2(:,1), markerSize, brushing.params.colorMat(DET.whaleNumber + 2, :), 'filled')
xlim(mmtime)
datetick('x', 'keepLimits')
ylabel('AZ2')
grid on
subpos = get(sp(6), 'Position');
set(sp(6), 'Position', subpos + [-.005, .005, .005, .005])
tb = axtoolbar('default');
tb.Visible = 'off';

% elevation, array 1:
sp(7) = subplot(4, 3, 11);
scatter(DET.TDet, DET.Ang2(:,2), markerSize, brushing.params.colorMat(DET.whaleNumber + 2, :), 'filled')
xlim(mmtime)
datetick('x', 'keepLimits')
ylabel('EL2')
grid on
subpos = get(sp(7), 'Position');
set(sp(7), 'Position', subpos + [-.005, .005, .005, .005])
tb = axtoolbar('default');
tb.Visible = 'off';

% *** Plot right column, large aperture TDOA: ***
NTDOA = size(DET.TDOA, 2) - 12; % number of large ap TDOAs

for spn = 1:NTDOA
    sp(spn+7) = subplot(NTDOA, 3, 3*spn); % subplots 3, 6, ..., 3*NTDOA
    scatter(DET.TDet, DET.TDOA(:,spn+12), markerSize, brushing.params.colorMat(DET.whaleNumber + 2, :), 'filled')
    set(gca, 'Xticklabel', [])
    xlim(mmtime)
    datetick('x', 'keepLimits')
    ylabel(['TDOA ', num2str(spn), ', (s)'])
    grid on
    subpos = get(sp(spn+7), 'Position');
    set(sp(spn+7), 'Position', subpos + [-.005, .005, .005, .005])
    tb = axtoolbar('default');
    tb.Visible = 'off';
end

% Set up brushing callback

b = brush(fig);
b.Enable = 'on';

% disable any brushed data before brushing new data
b.ActionPreCallback = {@onBrushDisableAction};

% brush data in one plot and apply it to corresponding subplots of the same
% array. PostCallBack incorporates key press actions
b.ActionPostCallback = {@onBrushAction};

end
%%
function refreshPlot(fig)

refreshdata
drawnow

end
%% Disable Previous One Brush Action
function onBrushDisableAction(source, eventdata)
Nplot = numel(source.Children);
iBrushedPlot = nan(Nplot,1);
for isp = 1:Nplot
    iBrushedPlot(isp) = ~isempty(source.Children(isp).Children.BrushData);
end
iplot = find(iBrushedPlot);
if ~isempty(iplot)
    % remove highlighted data
    for i = 1:length(iplot)
        % unselect highlighted points
        source.Children(iplot(i)).Children.BrushData = [];
    end
end
end


%% One Brush Action Brush
function onBrushAction(source, eventdata)
Nplot = numel(source.Children);
iBrushedPlot = nan(Nplot,1);
for isp = 1:Nplot
    iBrushedPlot(isp) = ~isempty(source.Children(isp).Children.BrushData);
end
iplot = find(iBrushedPlot);
selectedData = source.Children(iplot).Children.BrushData;

% get highlighted data:
for isp = 1:Nplot
    % add brushed points to corresponding subplots of AR1
    if isp ~= iplot
        source.Children(isp).Children.BrushData = selectedData;
    end
end

% Get mode manager and current mode property to set keypress function
hManager = uigetmodemanager(source);
% Allows to change key press callback function
[hManager.WindowListenerHandles.Enabled] = deal(false);  % HG2 (on 2014b or later)

% Keypress Callback
set(source, 'KeyPressFcn', @keyPressCallback);
end

%% Keypress Callback
function keyPressCallback(source, eventdata)

global brushing DET DETprev

key = eventdata.Key; % which key was pressed

% get highlighted data:
Ind = []; % highlighted data on AR1
Nplot = numel(source.Children); % number of plots

for isp = 1:Nplot % subplots 4, 5, & 6 are for AR1
    selectedData = source.Children(isp).Children.BrushData;
    Itemp = find(selectedData~=0);
    Ind = [Ind, Itemp];
    source.Children(isp).Children.BrushData = []; % unselect highlighted points
end

numkey = str2double(key); % convert keyboard input to a number (returns NaN if value is not a number)
if ~(isempty(numkey)||isnan(numkey)) % if input is number, assign as whale number:
    if numkey>8||numkey<0
        errBox = msgbox('error: invalid whale number\nSelect a number 1 thorugh 8', 'Error');
    else
        DETprev = DET; % set DETprev as current state for undo
        
    end

else % if input is letter, perform associated function
    switch key

        case 'd' % delete
            DETprev = DET; % set DETprev as current state for undo
            
            clickedAxis = get(gca); % The subplot which was clicked
            
            axisStr = clickedAxis.YLabel.String; % the ylabel of this axis (to determine which TDOAs to remove)
            
            if strcmp(axisStr(1), 'T') % if ylabel starts with T, this is a large ap TDOA plot
                tdoaNum = str2double(axisStr(6)) + 12; % the number of this TDOA
                DET.TDOA(Ind, tdoaNum) = nan; % change these TDOAs to nan to remove from plots/calculations
                set(clickedAxis.Children, 'ydata', DET.TDOA(:, tdoaNum));
                
            elseif strcmp(axisStr, 'AZ1') || strcmp(axisStr(1), 'EL1')
                DET.Ang1(Ind, :) = nan;
            elseif strcmp(axisStr, 'AZ2') || strcmp(axisStr(1), 'EL2')
                DET.Ang2(Ind, :) = nan;
            elseif strcmp(axisStr(1), 'x')||strcmp(axisStr(1), 'y')||strcmp(axisStr(1), 'z')
                % selected points are from a position plot, delete entirely
                DET(Ind, :) = [];
                plotDet(source)
            end
            
            % also remove these points from wloc since they would no longer
            % produce the same location estimates
            DET.wloc(Ind, :) = nan;
            for sp = 1:3
                set(source.Children(end+1-sp).Children, 'ydata', DET.wloc(:, sp))
            end
            

        case 'z' % toggle zoom on

            % enable zoom functionality
            z = zoom(source); % get zoom object of figure

            z.Enable = 'on'; % turn on zoom
            z.Direction = 'in'; % set zoom to "in"

            % reenable keyPress (zoom and brush automatically disable this)
            hManager = uigetmodemanager(source);
            [hManager.WindowListenerHandles.Enabled] = deal(false);  % HG2 (on 2014b or later)
            set(source, 'KeyPressFcn', @keyPressCallback);

        case 'x' % toggle zoom off
            z = zoom(source); % get zoom object of figure
            z.Enable = 'off';  % turn on zoom

            % reenable brush:
            b = brush(source);
            b.Enable = 'on';

            % reenable keyPress (zoom and brush automatically disable this)
            hManager = uigetmodemanager(source);
            [hManager.WindowListenerHandles.Enabled] = deal(false);  % HG2 (on 2014b or later)
            set(source, 'KeyPressFcn', @keyPressCallback);
        case 'r' % refresh (return zoom to full encounter, set plot boundaries to encompass only retained detections)
            
            plotDet(source)
            
        case 'u' % undo
            DET = DETprev;

            

    end
end

end