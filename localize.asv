function whaleOut = localize(whaleIn, hloc, H, driftPoly, varargin)
% whaleOut = localize(whaleIn, hloc, H, driftPoly)
% whaleOut = localize(whaleIn, hloc, H, driftPoly, paramFile)
% takes the TDOAs from a "whale" struct (output of calcTDOAfromCTC) and
% performs iterative model generation to determine the most likely whale location.
% INPUTS:
% -whaleIn = the "whale" struct
% -hloc = hydrophone locations (m).
% -H{1} and H{2} = H matrices for 4ch instruments (m).
% -driftPoly{i} contains the polynomials for the relative drift between
%  instruments. If drift is linear, driftPoly{i} will be two values
%  (y=mx+b).

global LOC

if nargin==5
    if isstring(varargin{1})
        loadParams(varargin{1})
    end
elseif nargin==4
    loadParams('localize.params')
else
    fprintf('Incorrect number of inputs')
end

whaleOut = whaleIn;

spd = 60*60*24; % seconds per day

for wn = 1:numel(whaleOut)
    if isempty(whaleOut{wn})
        continue
    end

    wloc = nan(length(whaleOut{wn}.TDet), 3);
    CIx = nan(length(whaleOut{wn}.TDet), 2);
    CIy = CIx;
    CIz = CIx;

    % Interpolate:
    if LOC.interp
        for ntdoa = 1:18
            Iuse = find(~isnan(whaleOut{wn}.TDOA(:, ntdoa)));
            if isempty(Iuse)
                continue
            end
            
            Ibreak = find(diff(whaleOut{wn}.TDet(Iuse, ntdoa))>(LOC.maxGap./spd));

            if isempty(Ibreak)
                tdoa = interp1(whaleOut{wn}.TDet(Iuse), whaleOut{wn}.TDOA(Iuse, ntdoa), whaleOut{wn}.TDet);
                whaleOut{wn}.TDOA(:, ntdoa) = tdoa;
                continue
            elseif length(Ibreak)==1
                tdoa(Iuse(1):Iuse(Ibreak)) = interp1(whaleOut{wn}.TDet(Iuse), whaleOut{wn}.TDOA(Iuse, ntdoa), whaleOut{wn}.TDet);
                whaleOut{wn}.TDOA(:, ntdoa) = tdoa;
                
            end

            tdoa = nan(size(whaleOut{wn}.TDOA(:, ntdoa)));

            tdoa_part = interp1(whaleOut{wn}.TDet(Iuse(1:Ibreak(1))), whaleOut{wn}.TDOA(Iuse(1:Ibreak(1)), ntdoa),...
                whaleOut{wn}.TDet(Iuse(1):Iuse(Ibreak(1))));
            tdoa(Iuse(istart):Iuse(iend)) = tdoa_part;
            for ib = 1:length(Ibreak)-1
                istart = Ibreak(ib)+1;
                iend = Ibreak(ib+1);
                tdoa_part = interp1(whaleOut{wn}.TDet(Iuse(istart:iend)), whaleOut{wn}.TDOA(Iuse(istart:iend), ntdoa),...
                    whaleOut{wn}.TDet(Iuse(istart):Iuse(iend)));
                tdoa(Iuse(istart):Iuse(iend)) = tdoa_part;

            end

            tdoa_part = interp1(whaleOut{wn}.TDet(Iuse(Ibreak(end)+1:end)), whaleOut{wn}.TDOA(Iuse(Ibreak(end)+1:end), ntdoa),...
                whaleOut{wn}.TDet(Iuse(Ibreak(end)+1:end)));
            tdoa(Iuse(istart):Iuse(iend)) = tdoa_part;
            
            whaleOut{wn}.TDOA(:, ntdoa) = tdoa;
        end
    end
    %% Case 1: DOA1 and at least one large ap TDOA:

    Iuse = find(~isnan(whaleOut{wn}.TDOA(:, 1)) & isnan(whaleOut{wn}.TDOA(:,7)) ...
        & sum(~isnan(whaleOut{wn}.TDOA(:, 13:end)), 2)>=1);

    for i = 1:length(Iuse)
        tdoa = whaleOut{wn}.TDOA(Iuse(i), :);
        drift = zeros(1,6);
        for ntdoa = 1:6
            drift(ntdoa) = polyval(driftPoly{ntdoa}, whaleOut{wn}.TDet(i));
        end
        tdoa(13:end) = tdoa(13:end) + LOC.driftSign.*drift;

        Ilrg = find(~isnan(tdoa(13:end))); % non-nan large ap TDOAs

        wlocs = [];
        wts = [];


        for ilrg = 1:length(Ilrg)
            hind = LOC.largePairs(Ilrg(ilrg), :); % which hydrophones are being used
            [wlocs_temp, wts_temp] = mc_OneSmlOneLrg(tdoa([1:6, Ilrg(ilrg)+12]), H{1}, hloc(1, :), hloc([hind(1), hind(2)], :), LOC);
            wlocs = [wlocs; wlocs_temp];
            wts = [wts; ones(size(wts_temp))./sum(var(wlocs))];
        end

        Irem = find(wts==inf | isnan(wts));
        wlocs(Irem, :) = [];
        wts(Irem) = [];
        bootfun = @(wlocs)(weightedAverage(wlocs, wts));
        ci = bootci(LOC.Nboot,{bootfun, wlocs},'Type','student');

        wloc(Iuse(i), :) = mean(ci);
        CIx(Iuse(i), :) = ci(:, 1);
        CIy(Iuse(i), :) = ci(:, 2);
        CIz(Iuse(i), :) = ci(:, 3);

    end
    %% Case 2: DOA2 and at least one large ap TDOA:

    Iuse = find(isnan(whaleOut{wn}.TDOA(:, 1)) & ~isnan(whaleOut{wn}.TDOA(:,7)) ...
        & sum(~isnan(whaleOut{wn}.TDOA(:, 13:end)), 2)>=1);

    for i = 1:length(Iuse)
        tdoa = whaleOut{wn}.TDOA(Iuse(i), :);
        drift = zeros(1,6);
        for ntdoa = 1:6
            drift(ntdoa) = polyval(driftPoly{ntdoa}, whaleOut{wn}.TDet(i));
        end
        tdoa(13:end) = tdoa(13:end) + LOC.driftSign.*drift;

        Ilrg = find(~isnan(tdoa(13:end))); % non-nan large ap TDOAs

        wlocs = [];
        wts = [];

        for ilrg = 1:length(Ilrg)
            hind = LOC.largePairs(Ilrg(ilrg), :); % which hydrophones are being used
            [wlocs_temp, wts_temp] = mc_OneSmlOneLrg(tdoa([7:12, Ilrg(ilrg)+12]), H{2}, hloc(2, :), hloc([hind(1), hind(2)], :), LOC);
            wlocs = [wlocs; wlocs_temp];
            wts = [wts; ones(size(wts_temp))./sum(var(wlocs))];
        end

        Irem = find(wts==inf | isnan(wts));
        wlocs(Irem, :) = [];
        wts(Irem) = [];

        bootfun = @(wlocs)(weightedAverage(wlocs, wts));
        ci = bootci(LOC.Nboot,{bootfun, wlocs},'Type','student');
        wloc(Iuse(i), :) = mean(ci);

        CIx(Iuse(i), :) = ci(:, 1);
        CIy(Iuse(i), :) = ci(:, 2);
        CIz(Iuse(i), :) = ci(:, 3);


    end

    %% Case 3: both small ap. TDOAs, at least one large ap TDOA:

    Iuse = find(~isnan(whaleOut{wn}.TDOA(:, 1)) & ~isnan(whaleOut{wn}.TDOA(:,7)) ...
        & sum(~isnan(whaleOut{wn}.TDOA(:, 13:end)), 2)>=1);

    for i = 1:length(Iuse)
        tdoa = whaleOut{wn}.TDOA(Iuse(i), :);
        drift = zeros(1,6);
        for ntdoa = 1:6
            drift(ntdoa) = polyval(driftPoly{ntdoa}, whaleOut{wn}.TDet(i));
        end
        tdoa(13:end) = tdoa(13:end) + LOC.driftSign.*drift;

        Ilrg = find(~isnan(tdoa(13:end))); % non-nan large ap TDOAs

        wlocs = [];
        wts = [];


        for ilrg = 1:length(Ilrg)
            hind = LOC.largePairs(Ilrg(ilrg), :); % which hydrophones are being used in large ap TDOA
            % Using DOA1:
            [wlocs_temp, wts_temp] = mc_OneSmlOneLrg(tdoa([1:6, Ilrg(ilrg)+12]), H{1}, hloc(1, :), hloc([hind(1), hind(2)], :), LOC);
            wlocs = [wlocs; wlocs_temp];
            wts = [wts; ones(size(wts_temp))./sum(var(wlocs))];

            % using DOA2:
            [wlocs_temp, wts_temp] = mc_OneSmlOneLrg(tdoa([7:12, Ilrg(ilrg)+12]), H{2}, hloc(2, :), hloc([hind(1), hind(2)], :), LOC);
            wlocs = [wlocs; wlocs_temp];
            wts = [wts; ones(size(wts_temp))./sum(var(wlocs))];
        end

        % using DOA intersect:
        [wlocs_temp, wts_temp] = mc_TwoSml(tdoa(1:12), H, hloc([1,2], :), LOC);
        wlocs = [wlocs; wlocs_temp];
        wts = [wts; ones(size(wts_temp))./sum(var(wlocs))];

        [wlocs_temp, wts_temp] = mc_TwoSml(tdoa([7:12, 1:6]), {H{2}, H{1}}, hloc([2,1], :), LOC);
        wlocs = [wlocs; wlocs_temp];
        wts = [wts; ones(size(wts_temp))./sum(var(wlocs))];

        Irem = find(wts==inf | isnan(wts));
        wlocs(Irem, :) = [];
        wts(Irem) = [];
        bootfun = @(wlocs)(weightedAverage(wlocs, wts));
        ci = bootci(LOC.Nboot,{bootfun, wlocs},'Type','student');
  
        wloc(Iuse(i), :) = mean(ci);

        CIx(Iuse(i), :) = ci(:, 1);
        CIy(Iuse(i), :) = ci(:, 2);
        CIz(Iuse(i), :) = ci(:, 3);

    end
    %% Case 4: both small ap. TDOAs, no large ap TDOAs:
    Iuse = find(~isnan(whaleOut{wn}.TDOA(:, 1)) & ~isnan(whaleOut{wn}.TDOA(:,7)) ...
        & sum(~isnan(whaleOut{wn}.TDOA(:, 13:end)), 2)==0);

    for i = 1:length(Iuse)
        tdoa = whaleOut{wn}.TDOA(Iuse(i), :);

        wlocs = [];
        wts = [];

        % using DOA intersect:
        [wlocs_temp, wts_temp] = mc_TwoSml(tdoa(1:12), H, hloc([1,2], :), LOC);
        wlocs = [wlocs; wlocs_temp];

        wts = [wts; ones(size(wts_temp))./sum(var(wlocs))];

        [wlocs_temp, wts_temp] = mc_TwoSml(tdoa([7:12, 1:6]), {H{2}, H{1}}, hloc([2,1], :), LOC);
        wlocs = [wlocs; wlocs_temp];

        wts = [wts; ones(size(wts_temp))./sum(var(wlocs))];
        
        Irem = find(wts==inf | isnan(wts));
        wlocs(Irem, :) = [];
        wts(Irem) = [];

        bootfun = @(wlocs)(weightedAverage(wlocs, wts));
        ci = bootci(LOC.Nboot,{bootfun, wlocs},'Type','student');
        wloc(Iuse(i), :) = mean(ci);

        CIx(Iuse(i), :) = ci(:, 1);
        CIy(Iuse(i), :) = ci(:, 2);
        CIz(Iuse(i), :) = ci(:, 3);

    end

    whaleOut{wn}.wloc = wloc;
    whaleOut{wn}.CIx = CIx;
    whaleOut{wn}.CIy = CIy;
    whaleOut{wn}.CIz = CIz;


end
end
%% ************************* SUB-FUNCTIONS *******************************

%% Weighted average function

function wloc = weightedAverage(wlocs, wts)
wloc = sum(wlocs.*wts)./sum(wts);
end

%% Monte Carlo functions
function [wlocs, wts] = mc_OneSmlOneLrg(tdoa, H, hloc_sml, hloc_lrg, LOC)
wlocs = nan(LOC.NMonteCarlo, 3);
wts = nan(LOC.NMonteCarlo, 1);

parfor i = 1:LOC.NMonteCarlo

    tdoa_mc = tdoa;

    % add random perturbations to tdoas according:
    tdoa_mc(1:6) = tdoa_mc(1:6) + randn(1, 6).*LOC.sig_sml;
    tdoa_mc(7) = tdoa_mc(7) + randn(1).*LOC.sig_lrg;

    [wlocs(i, :), wts(i)] = OneSmlOneLrg(tdoa_mc, H, hloc_sml, hloc_lrg, LOC);

end
end

function [wlocs, wts] = mc_TwoSml(tdoa, H, hloc, LOC)
wlocs = nan(LOC.NMonteCarlo, 3);
wts = nan(LOC.NMonteCarlo, 1);
parfor i = 1:LOC.NMonteCarlo
    tdoa_mc = tdoa;

    tdoa_mc = tdoa_mc + randn(1, 12).*LOC.sig_sml;

    [wlocs(i, :), wts(i)] = TwoSml(tdoa_mc, H, hloc, LOC);
end
end
%% Localization functions
function [wloc, wt] = OneSmlOneLrg(tdoa, H, hloc_sml, hloc_lrg, LOC)
doa = (tdoa(1:6).'.*LOC.c)\H;
doa = doa./sqrt(sum(doa.^2));

wloc_pot = LOC.R*doa + hloc_sml; % potential source locations along DOA

r1 = sqrt(sum((wloc_pot - hloc_lrg(1, :)).^2, 2)); % potential ranges to first inst
r2 = sqrt(sum((wloc_pot - hloc_lrg(2, :)).^2, 2)); % potential ranges to second inst

tdoa_exp = (r1 - r2)./LOC.c;

MSE = (tdoa(7) - tdoa_exp).^2; % mean squared error

[~, I] = min(MSE);

wloc = wloc_pot(I, :);

Idiff = max([1, I-2]):min([I+2, length(MSE)]); % indices to use in weight calculation
wt = mean(diff(diff(MSE(Idiff)))); % weight

end

function [wloc, wt] = TwoSml(tdoa, H, hloc, LOC)
doa1 = (tdoa(1:6).'.*LOC.c)\H{1};
doa1 = doa1./sqrt(sum(doa1.^2));

doa2 = (tdoa(7:12).'.*LOC.c)\H{2};
doa2 = doa2./sqrt(sum(doa2.^2));

wloc_pot = LOC.R*doa1 + hloc(1, :);

MSE = sum(((wloc_pot - hloc(2, :)) - ((wloc_pot-hloc(2, :))*doa2.').*doa2).^2, 2)./LOC.c^2;

[~, I] = min(MSE);

wloc = wloc_pot(I, :);

Idiff = max([1, I-2]):min([I+2, length(MSE)]); % indices to use in weight calculation
wt = mean(diff(diff(MSE(Idiff)))); % weight

end